# GitLab CI/CD Pipeline for AI Code Review Bot
# This pipeline automatically triggers AI code reviews on merge requests

stages:
  - build
  - test
  - review
  - deploy

variables:
  NODE_VERSION: "18"
  DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# Build stage - Install dependencies and build the application
build:
  stage: build
  image: node:${NODE_VERSION}-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  script:
    - npm ci --only=production
    - npm run lint
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

# Test stage - Run unit tests
test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build
  script:
    - npm ci
    - npm test
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# AI Code Review stage - The main review job
ai_code_review:
  stage: review
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build
  script:
    - echo "Starting AI code review for MR ${CI_MERGE_REQUEST_IID}"
    - node src/index.js cli
  variables:
    # These will be set from GitLab CI/CD variables
    GITLAB_URL: $CI_SERVER_URL
    GITLAB_TOKEN: $GITLAB_ACCESS_TOKEN
    GITLAB_PROJECT_ID: $CI_PROJECT_ID
    DEEPSEEK_API_KEY: $DEEPSEEK_API_KEY
    AI_PROVIDER: "deepseek"
    DEEPSEEK_MODEL: "deepseek-coder"
    AI_MAX_TOKENS: "4000"
    AI_TEMPERATURE: "0.1"
    LOG_LEVEL: "info"
    NODE_ENV: "production"
  only:
    - merge_requests
  except:
    variables:
      - $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^(main|master|develop)$/
  when: always
  allow_failure: true
  timeout: 10 minutes

# Docker build stage - Build and push Docker image
docker_build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE_TAG .
    - docker push $DOCKER_IMAGE_TAG
    - docker tag $DOCKER_IMAGE_TAG $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop
  when: manual

# Deploy to staging - Deploy the webhook server
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying AI reviewer webhook to staging"
    - |
      curl -X POST \
        -H "Authorization: Bearer $DEPLOY_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
          "image": "'$DOCKER_IMAGE_TAG'",
          "environment": "staging",
          "config": {
            "GITLAB_URL": "'$CI_SERVER_URL'",
            "GITLAB_TOKEN": "'$GITLAB_ACCESS_TOKEN'",
            "DEEPSEEK_API_KEY": "'$DEEPSEEK_API_KEY'",
            "AI_PROVIDER": "deepseek",
            "PORT": "3000",
            "NODE_ENV": "staging"
          }
        }' \
        $STAGING_DEPLOY_WEBHOOK
  environment:
    name: staging
    url: $STAGING_URL
  only:
    - develop
  when: manual

# Deploy to production - Deploy the webhook server
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying AI reviewer webhook to production"
    - |
      curl -X POST \
        -H "Authorization: Bearer $DEPLOY_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
          "image": "'$DOCKER_IMAGE_TAG'",
          "environment": "production",
          "config": {
            "GITLAB_URL": "'$CI_SERVER_URL'",
            "GITLAB_TOKEN": "'$GITLAB_ACCESS_TOKEN'",
            "DEEPSEEK_API_KEY": "'$DEEPSEEK_API_KEY'",
            "AI_PROVIDER": "deepseek",
            "PORT": "3000",
            "NODE_ENV": "production"
          }
        }' \
        $PRODUCTION_DEPLOY_WEBHOOK
  environment:
    name: production
    url: $PRODUCTION_URL
  only:
    - main
  when: manual

# Security scan - Check for vulnerabilities
security_scan:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build
  script:
    - npm audit --audit-level=high
    - npx retire --exitwith 1
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

# Performance test - Basic performance checks
performance_test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build
  script:
    - echo "Running basic performance tests"
    - time node -e "require('./src/utils/diff-parser'); console.log('DiffParser loaded successfully');"
    - time node -e "require('./src/services/ai-service'); console.log('AIService loaded successfully');"
  only:
    - merge_requests
    - main
  allow_failure: true

# Cleanup job - Clean up old artifacts
cleanup:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Cleaning up old artifacts and images"
    - echo "This would typically clean up old Docker images and artifacts"
  only:
    - schedules
  when: always

# Manual trigger for testing the review bot
test_review_bot:
  stage: review
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build
  script:
    - echo "Testing AI review bot manually"
    - echo "Project ID: $CI_PROJECT_ID"
    - echo "MR IID: $TEST_MR_IID"
    - node src/index.js cli
  variables:
    GITLAB_URL: $CI_SERVER_URL
    GITLAB_TOKEN: $GITLAB_ACCESS_TOKEN
    GITLAB_PROJECT_ID: $CI_PROJECT_ID
    CI_MERGE_REQUEST_IID: $TEST_MR_IID
    DEEPSEEK_API_KEY: $DEEPSEEK_API_KEY
    AI_PROVIDER: "deepseek"
    LOG_LEVEL: "debug"
  when: manual
  allow_failure: true
